/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (41.66%)
 * Likes:    228
 * Dislikes: 183
 * Total Accepted:    19.7K
 * Total Submissions: 47.3K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * In a network of nodes, each node i is directly connected to another node j
 * if and only if graph[i][j] = 1.
 * 
 * Some nodes initial are initially infected by malware.  Whenever two nodes
 * are directly connected and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware.  This spread of malware
 * will continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network, after the spread of malware stops.
 * 
 * We will remove one node from the initial list.  Return the node that if
 * removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * may still be infected later as a result of the malware spread.
 * 
 * 
 * 
 * 
 * 
 * 
 * Example 1:
 * 
 * 
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * 
 * 
 * Example 2:
 * 
 * 
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * 
 * 
 * Example 3:
 * 
 * 
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * 
 * 
 * Note:
 * 
 * 
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * 
 * 
 */

// @lc code=start
#include <bits/stdc++.h>
using namespace std;
#define forn(i, n) for(int i = 0; i < int(n); i++)
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)
#define pb push_back
#define deb(x) cout<<#x<<" "<<x<<endl;
#define deb2(x, y) cout<<#x<<" "<<x<<" "<<#y<<" "<<y<<endl;
#define deb3(x, y, z) cout<<#x<<" "<<x<<" "<<#y<<" "<<y<<" "<<#z<<" "<<z<<endl;
#define all(x) x.begin(), x.end()
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<ll> vl;
typedef vector<vector<ll>> vvl;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef pair<int, int> pii;
const int mod = 1e9 + 7;
template<class T, class U> inline void add_self(T &a, U b){a += b;if (a >= mod) a -= mod;if (a < 0) a += mod;}
template<class T, class U> inline void min_self(T &x, U y) { if (y < x) x = y; }
template<class T, class U> inline void max_self(T &x, U y) { if (y > x) x = y; }

template <typename T>void print(T v, bool show_index = false){int w = 2;if(show_index){for(int i=0; i<v.size(); i++)cout<<setw(w)<<i<<" ";cout<<endl;}for(auto i= v.begin(); i!=v.end(); i++)cout<<setw(w)<<*i<<" ";cout<<endl;}
template <typename T>void print_vv(T v){if(v.size()==0) {cout<<"Empty"<<endl; return;} int w = 3;cout<<setw(w)<<" ";for(int j=0; j<v[0].size(); j++)cout<<setw(w)<<j<<" ";cout<<endl;for(auto i= 0; i<v.size(); i++){cout<<i<<" {";for(auto j = 0; j!=v[i].size(); j++){cout<<setw(w)<<v[i][j]<<",";}cout<<"},"<<endl;}cout<<endl;}
template <class T, class U> void print_m(unordered_map<T,U> m, int w=3){if(m.empty()){cout<<"Empty"<<endl; return;}for(auto x: m)cout<<"("<<x.first<<": "<<x.second<<"),"<<endl;cout<<endl;}

// DFS each initial node and record the number of edges it affects
// if there are two nodes of the same component in the initail list,
// then removing any one of these won't stop the other to spread infection
// so only consider the nodes, with unique color (mark each dfs nodes with a color)
class Solution0 {
    int n, C;
    vi colors; // color of each node
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        colors.clear(); colors.resize(n, -1);
        C = 0;

        for(int node=0; node<n; ++node){
            if(colors[node]==-1)
                dfs(node, graph);
                ++C;
        }

        vi size(C); // size of each color
        for(int c: colors)
            size[c]++;
        
        // unique colors
        vi colorCount(C);
        for(int &node: initial)
            colorCount[colors[node]]++;
        
        int ans = INT_MAX;
        for(int &node: initial){
            int c = colors[node];
            if(colorCount[c]==1){
                if(ans==INT_MAX)
                    ans = node;
                else if(size[c] > size[colors[ans]])
                    ans = node;
                else if(size[c]==size[colors[ans]] && node<ans)
                    ans = node;
            }
        }

        if(ans==INT_MAX){
            for(int &node: initial)
                ans = min(ans, node);
        }

        return ans;

    }

    void dfs(int node, vvi &graph){
        colors[node] = C;
        for(int i=0; i<n; ++i){
            if(graph[node][i]==1 && colors[i]==-1)
                dfs(i,graph);
        }
    }
};

// Union find all nodes
// Calculate the size of each union
// Calculate the malware count in each union
// a node will be considered only if its malware count is 1
// else return min index of all initial
class Solution {
    int n; 
    vi parents;
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        parents.clear(); parents.resize(n);
        iota(all(parents),0);

        for(int i=0; i<n; ++i){
            for(int j=i+1; j<n; ++j){
                if(graph[i][j]) unite(i,j);
            }
        }

        vi size(n), malwareCnt(n);
        for(int i=0; i<n; ++i) size[find(i)]++;
        for(auto &node: initial)
            malwareCnt[find(node)]++;
        
        int ans = INT_MAX;
        int ans_size = 0;
        for(auto &node: initial){
            if(malwareCnt[find(node)]==1){
                int sz = size[find(node)];
                if(ans==INT_MAX)
                    ans = node, ans_size = sz;
                else if(sz==ans_size && node<ans)
                    ans = node;
                else if(sz>ans_size)
                    ans = node;
            }
        }

        if(ans==INT_MAX)
            ans = *min_element(all(initial));
        return ans;
    }
    
    int find(int x){
        if(parents[x]==x) return x;
        return parents[x] = find(parents[x]);
    }

    void unite(int x, int y){
        parents[find(y)] = find(x);
    }
};
// @lc code=end

int main(){
    Solution sol; vvi graph; vi initial; int out;

    graph = {{1,1,0},
             {1,1,0},
             {0,0,1}}, initial = {0,1};
    out = sol.minMalwareSpread(graph, initial); deb(out);

    graph = {{1,0,0},
             {0,1,0},
             {0,0,1}}, initial = {0,2};
    out = sol.minMalwareSpread(graph, initial); deb(out);

    graph = {{1,1,1},
             {1,1,1},
             {1,1,1}}, initial = {1,2};
    out = sol.minMalwareSpread(graph, initial); deb(out);
    
    graph = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}}, initial = {3,1};
    out = sol.minMalwareSpread(graph, initial); deb(out);

    graph = {{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,1,0},{0,0,0,1,1,0},{0,0,0,0,0,1}};
    initial = {5,0};
    out = sol.minMalwareSpread(graph, initial); deb(out);

    graph  = {{1,1,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,1},{0,0,1,0,1,0,0,0,0,1},{0,0,0,1,0,0,0,0,0,1},{0,0,1,0,1,0,1,0,0,1},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,1,1,1,0,0,1},{0,0,0,0,0,0,0,1,1,0},{0,0,0,0,0,0,0,1,1,0},{0,1,1,1,1,0,1,0,0,1}};
    initial = {9,0,2};
    out = sol.minMalwareSpread(graph, initial); deb(out);

    return 0;
}

